// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BookBorrowing.DATA.Models
{
    public partial class BookBorrowingContext : DbContext
    {
        public BookBorrowingContext()
        {
        }

        public BookBorrowingContext(DbContextOptions<BookBorrowingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Book> Book { get; set; }
        public virtual DbSet<Borrowing> Borrowing { get; set; }
        public virtual DbSet<Client> Client { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-IH3INBQ\\SQL_SERVER_2023;Initial Catalog=BookBorrowing;User ID=sa;Password=admin123; TrustServerCertificate=true");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Book>(entity =>
            {
                entity.Property(e => e.AuthorName).IsFixedLength();

                entity.Property(e => e.BookEdition).IsFixedLength();

                entity.Property(e => e.BookName).IsFixedLength();

                entity.Property(e => e.PublisherName).IsFixedLength();
            });

            modelBuilder.Entity<Borrowing>(entity =>
            {
                entity.Property(e => e.BorrowingAdress).IsFixedLength();

                entity.HasOne(d => d.IdBookNavigation)
                    .WithMany(p => p.Borrowing)
                    .HasForeignKey(d => d.IdBook)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Borrowing_Book");

                entity.HasOne(d => d.IdClientNavigation)
                    .WithMany(p => p.Borrowing)
                    .HasForeignKey(d => d.IdClient)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Borrowing_Client");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.Property(e => e.Adress).IsFixedLength();

                entity.Property(e => e.CellNumber).IsFixedLength();

                entity.Property(e => e.City).IsFixedLength();

                entity.Property(e => e.ClientCpf).IsFixedLength();

                entity.Property(e => e.ClientName).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}